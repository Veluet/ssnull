/* A good chunk of this is based on https://www.kevinpowell.co/article/using-my-colors/ */

//  Create shades of each color and return values as map
@function color-map($color, $values) {
    $base:        $values;
    $lightest-ssjgssj:    scale-color(mix(#fff, $values, 99.5%), $saturation: 16%);
    $lightest-ssjg:    scale-color(mix(#fff, $values, 99%), $saturation: 14%);
    $lightest-ssj3:    scale-color(mix(#fff, $values, 95%), $saturation: 12%);
    $lightest-ssj2:    scale-color(mix(#fff, $values, 90%), $saturation: 10%);
    $lightest-ssj:    scale-color(mix(#fff, $values, 80%), $saturation: 8%);
    $lightest:    scale-color(mix(#fff, $values, 60%), $saturation: 6%);
    $lighter:     scale-color(mix(#fff, $values, 25%), $saturation: 4%);
    $light-hint:  scale-color(mix(#fff, $values, 15%), $saturation:  2%);
    $dark-hint:   scale-color(mix(#000, $values,  5%), $saturation: -2%);
    $darker:      scale-color(mix(#000, $values, 30%), $saturation: -4%);
    $darkest:     scale-color(mix(#000, $values, 45%), $saturation: -6%);
  
  
    $color-shades: (
            #{$color}-100: $lightest,
            #{$color}-75:  $lighter,
            //#{$color}-66:  $light-hint,
            #{$color}-50:  $base,
            //#{$color}-33:  $dark-hint,
            #{$color}-25:  $darker,
            #{$color}-0:   $darkest
    );

    // There's always a need to go even further beyond with gray.
    @if $color == "gray" {
      $map: (#{$color}-200: $lightest-ssj);
      $color-shades: map-merge($color-shades, $map);
    }
  
    @if $color == "gray" {
      $map: (#{$color}-300: $lightest-ssj2);
      $color-shades: map-merge($color-shades, $map);
    }
      
    @if $color == "gray" {
      $map: (#{$color}-400: $lightest-ssj3);
      $color-shades: map-merge($color-shades, $map);
    }
          
    @if $color == "gray" {
      $map: (#{$color}-500: $lightest-ssjg);
      $color-shades: map-merge($color-shades, $map);
    }

    @return $color-shades;
  }
  //  Set up master map for all colors
  @function color-maps($colors) {
    $color-map: ();
  
    @each $color, $value in $colors {
      $map: (color-map($color, $value));
      $color-map: map-merge($color-map, $map);
    }
  
    @return $color-map;
  }
  
  //  Initiate maps function to build maps
  $color-map: color-maps($colors);
  
  @each $name, $color-shade in $color-map {
    .background-#{$name} {
      background-color: #{$color-shade}!important;
    };
    .text-#{$name} {
      color: #{$color-shade}!important;
    };
    .border-#{$name} {
      border-width: 1px;
      border-style: solid;
      border-color: #{$color-shade}!important;
    };
  }
  
  //  Create mixin to better call colors from map
  @function color($color, $shade) {
    @return map-get($color-map, #{$color}-#{$shade});
  }
  